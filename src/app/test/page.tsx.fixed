'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import Navbar from '~/components/ui/Navbar';

// Timer component for exam countdown
const ExamTimer = ({ 
  duration, 
  onTimeout 
}: { 
  duration: number, // in seconds
  onTimeout: () => void 
}) => {
  const [timeLeft, setTimeLeft] = useState(duration);
  
  useEffect(() => {
    // Initialize timer with provided duration
    setTimeLeft(duration);
    
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          onTimeout();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [duration, onTimeout]);
  
  // Format time as mm:ss
  const minutes = Math.floor(timeLeft / 60);
  const seconds = timeLeft % 60;
  const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  
  return (
    <div className="fixed top-5 right-5 bg-black/80 text-white py-2 px-4 rounded-md shadow-md">
      <div className="text-lg font-bold">Time Remaining</div>
      <div className="text-2xl text-center">{formattedTime}</div>
    </div>
  );
};

const Page = () => {
  const { isLoaded, isSignedIn, user: _user } = useUser();
  const router = useRouter();
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [exam, setExam] = useState<{
    id: string;
    subject: string;
    topic?: string;
    num_questions: number;
    difficulty: string;
    duration: number;
    questions: {
      question: string;
      options: string[];
    }[];
  } | null>(null);
  const [examAvailable, setExamAvailable] = useState(false);
  const [hasSubmitted, setHasSubmitted] = useState(false);
  const [answers, setAnswers] = useState<{ question_id: number, selected_option: string }[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionResult, setSubmissionResult] = useState<{
    message: string;
    score?: number;
    total?: number;
    percentage?: number;
  } | null>(null);

  // Check if an exam is available
  const checkExam = async () => {
    if (!isSignedIn) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/exams/current');
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to check for exams');
      }
      
      setExamAvailable(data.available);
      
      if (data.available && data.exam) {
        setExam(data.exam);
        // Initialize answers array with empty selections
        setAnswers(data.exam.questions.map((q, index) => ({
          question_id: index,
          selected_option: ''
        })));
      } else {
        setExam(null);
        // Check if user has already submitted
        setHasSubmitted(!!data.hasSubmitted);
      }
    } catch (err: any) {
      setError(err.message || 'Failed to check for available exams');
      setExam(null);
      setExamAvailable(false);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle answer selection
  const handleAnswerSelect = (questionId: number, option: string) => {
    setAnswers(prev => 
      prev.map(a => 
        a.question_id === questionId ? { ...a, selected_option: option } : a
      )
    );
  };
  
  // Submit the exam
  const submitExam = async () => {
    if (!exam || !exam.id) return;
    
    // Check if all questions have been answered
    const unanswered = answers.filter(a => !a.selected_option).length;
    if (unanswered > 0) {
      if (!confirm(`You have ${unanswered} unanswered question(s). Are you sure you want to submit?`)) {
        return;
      }
    }
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      const response = await fetch('/api/exams/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          exam_id: exam.id,
          answers: answers
        }),
      });
      
      const result = await response.json();
      
      if (result.error) {
        setError(result.error);
        return;
      }
      
      setSubmissionResult(result);
      setExamAvailable(false);
      setHasSubmitted(true);
      
    } catch (err) {
      setError('Failed to submit exam. Please try again.');
      console.error(err);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Handle timer timeout
  const handleTimeout = () => {
    alert('Time is up! Your exam will be submitted automatically.');
    submitExam();
  };
  
  // Redirect if not signed in
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push('/auth/redirect');
    }
  }, [isLoaded, isSignedIn, router]);
  
  // Check for exams when component mounts
  useEffect(() => {
    if (isLoaded && isSignedIn) {
      checkExam();
    }
  }, [isLoaded, isSignedIn]);
  
  if (!isLoaded || !isSignedIn) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>;
  }

  return (
    <main className="flex min-h-screen flex-col items-center p-4 md:p-8 bg-[#0c0c0c] text-white">
      <h1 className="text-3xl font-bold mb-8">Exams</h1>
      
      {!examAvailable && !hasSubmitted && (
        <div className="w-full max-w-2xl text-center">
          <p className="text-lg mb-4">
            Check if you have any exams available today.
          </p>
          <button 
            onClick={checkExam}
            disabled={loading}
            className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-md font-medium disabled:opacity-50"
          >
            {loading ? 'Checking...' : 'Refresh'}
          </button>
          
          {error && (
            <div className="mt-4 p-3 bg-red-900/50 border border-red-500 rounded-md text-red-200">
              {error}
            </div>
          )}
        </div>
      )}
      
      {!examAvailable && hasSubmitted && (
        <div className="w-full max-w-2xl bg-gray-800 rounded-md p-6">
          <h2 className="text-xl font-semibold mb-4">Exam Already Submitted</h2>
          {submissionResult ? (
            <div className="text-center">
              <p className="text-2xl font-bold mb-2">{submissionResult.message}</p>
              <p>Thank you for completing the exam.</p>
            </div>
          ) : (
            <p>You have already submitted this exam. You cannot retake it.</p>
          )}
        </div>
      )}
      
      {examAvailable && exam && (
        <div className="w-full max-w-3xl">
          <div className="bg-gray-800 rounded-lg p-6 mb-6">
            <h2 className="text-2xl font-bold mb-2">{exam.subject}</h2>
            {exam.topic && <p className="text-gray-300 mb-4">Topic: {exam.topic}</p>}
            <div className="flex flex-wrap gap-4 text-sm">
              <div className="bg-gray-700 px-3 py-1 rounded-full">
                {exam.num_questions} Questions
              </div>
              <div className="bg-gray-700 px-3 py-1 rounded-full capitalize">
                {exam.difficulty} Difficulty
              </div>
              <div className="bg-gray-700 px-3 py-1 rounded-full">
                {exam.duration} Minutes
              </div>
            </div>
          </div>
          
          <ExamTimer 
            duration={exam.duration * 60} // convert minutes to seconds
            onTimeout={handleTimeout} 
          />
          
          <form onSubmit={(e) => { e.preventDefault(); submitExam(); }}>
            {exam.questions.map((question, qIndex) => (
              <div key={qIndex} className="bg-gray-800 rounded-lg p-6 mb-6">
                <h3 className="text-xl font-semibold mb-4">
                  {qIndex + 1}. {question.question}
                </h3>
                <div className="space-y-3">
                  {question.options.map((option, oIndex) => (
                    <label key={oIndex} className="flex items-start p-3 bg-gray-700/50 rounded-md cursor-pointer hover:bg-gray-700">
                      <input
                        type="radio"
                        name={`question-${qIndex}`}
                        value={option}
                        checked={answers[qIndex]?.selected_option === option}
                        onChange={() => handleAnswerSelect(qIndex, option)}
                        className="mt-1 mr-3"
                      />
                      <span>{option}</span>
                    </label>
                  ))}
                </div>
              </div>
            ))}
            
            <div className="flex justify-center mt-8 mb-16">
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-8 py-3 bg-green-600 hover:bg-green-700 rounded-md font-semibold text-lg disabled:opacity-50"
              >
                {isSubmitting ? 'Submitting...' : 'Submit Exam'}
              </button>
            </div>
          </form>
        </div>
      )}
      
      {!examAvailable && !hasSubmitted && !loading && (
        <div className="mt-8 text-gray-400 italic">
          No exam is currently available. Check back later or contact your teacher.
        </div>
      )}
    </main>
  );
};

export default Page;
